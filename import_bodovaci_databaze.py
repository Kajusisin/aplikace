import pandas as pd
import os
from flask import current_app as app  # ‚úÖ Pou≈æit√≠ spr√°vn√©ho kontextu aplikace
from sqlalchemy import text  # ‚úÖ Nutn√© pro spr√°vn√© spou≈°tƒõn√≠ SQL p≈ô√≠kaz≈Ø
from db_config import db
from models import Discipline, ReferenceScore

# üîπ Form√°tovac√≠ pravidla pro discipl√≠ny - ponech√°me je, ale zmƒõn√≠me zp≈Øsob pou≈æit√≠
FORMATY_DISCIPLIN = {
    "Shyby na ≈°ikm√© lavici za 2 min.": "int",
    "Kliky za 2 min.": "int",
    "≈†vihadlo za 2 min.": "int",
    "Jac√≠k za 2 min.": "int",
    "ƒålunkov√Ω bƒõh": "float",
    "≈†plh": "float",
    "Skok z m√≠sta": "int",
    "Trojskok z m√≠sta": "int",
    "Hod medicinbalem": "float",
    "Hod kriketov√Ωm m√≠ƒçkem": "float",
    "Hod o≈°tƒõpem": "float",
    "Vrh koul√≠": "float",
    "Skok dalek√Ω": "int",
    "Skok vysok√Ω": "int",
    "Bƒõh 60 m": "float",
    "Bƒõh 100 m": "float",
    "Bƒõh 150 m": "float",
    "Bƒõh 300 m": "str",
    "Bƒõh 600 m": "str",
    "Bƒõh 800 m": "str",
    "Bƒõh 1000 m": "str",
    "Bƒõh 1500 m": "str",
    "Refer√°t": "int",
    "Reprezentace ≈°koly": "int",
    "No≈°en√≠ cviƒçebn√≠ho √∫boru": "int",
    "Veden√≠ rozcviƒçky": "int",
    "Mimo≈°koln√≠ aktivita (nap≈ô. screenshot aplikace sleduj√≠c√≠ aktivitu)": "int",
    "Aktivn√≠ p≈ô√≠stup, snaha": "int",
    "Zlep≈°en√≠ v√Ωkonu od posledn√≠ho mƒõ≈ôen√≠": "int",
    "Pomoc s organizac√≠": "int",
    "Ostatn√≠ plusov√© body": "int",
    "Neno≈°en√≠ cviƒçebn√≠ho √∫boru": "int",
    "Bezpeƒçnostn√≠ riziko (gumiƒçka, boty, ‚Ä¶)": "int",
    "Nek√°ze≈à (ru≈°en√≠, neperespektov√°n√≠ pokyn≈Ø, ‚Ä¶)": "int",
    "Ostatn√≠ m√≠nusov√© body": "int"
}

def convert_value(value, format_type):
    """
    Jednoduch√° p≈ô√≠prava hodnoty bez p≈ôetypov√°n√≠ - ƒçist√≠ a form√°tuje hodnotu.
    V√Ωstupem je v≈ædy ≈ôetƒõzec nebo None.
    """
    if value is None or pd.isna(value) or str(value).strip() == "":
        return None
        
    # Z√°kladn√≠ ƒçi≈°tƒõn√≠ hodnoty bez p≈ôevodu na jin√Ω typ
    result = str(value).strip().replace(",", ".")
    
    # Kontrola, zda se jedn√° o ƒçasov√Ω form√°t (obsahuje :)
    if ":" in result:
        parts = result.split(":")
        if len(parts) == 2:  # MM:SS
            try:
                minutes = int(parts[0])
                seconds = int(parts[1])
                result = f"{minutes}:{seconds:02d}"
            except ValueError:
                pass  # Pokud nelze p≈ôev√©st, nech√°me p≈Øvodn√≠ hodnotu
        elif len(parts) == 3:  # H:MM:SS
            try:
                hours = int(parts[0])
                minutes = int(parts[1])
                seconds = int(parts[2])
                total_min = hours * 60 + minutes
                result = f"{total_min}:{seconds:02d}"
            except ValueError:
                pass  # Pokud nelze p≈ôev√©st, nech√°me p≈Øvodn√≠ hodnotu
    
    return result

def import_excel(file_path):
    """Naƒçte bodovac√≠ datab√°zi z Excelu a ulo≈æ√≠ do SQL datab√°ze."""
    try:
        with app.app_context():
            print(f"üöÄ Spou≈°t√≠m import bodovac√≠ datab√°ze z {file_path}...")

            if not os.path.exists(file_path):
                print(f"‚ùå Chyba: Soubor {file_path} neexistuje!")
                return False

            # Naƒçten√≠ dat z Excelu - v≈°echny sloupce jako ≈ôetƒõzce
            df = pd.read_excel(file_path, dtype=str)  # Naƒç√≠t√°me v≈°e jako text
            print(f"‚úÖ Naƒçteno {len(df)} ≈ô√°dk≈Ø z Excelu.")

            # Smaz√°n√≠ star√Ωch sk√≥re p≈ôed importem
            with db.session.begin():
                db.session.execute(text("DELETE FROM reference_scores"))

            # Poƒç√≠tadla pro statistiku
            processed_rows = 0
            skipped_rows = 0
            error_rows = 0

            # Zpracov√°n√≠ po ≈ô√°dc√≠ch
            for _, row in df.iterrows():
                processed_rows += 1
                
                # Vytvo≈ô√≠me transakci pro ka≈æd√Ω ≈ô√°dek
                with db.session.begin():
                    try:
                        # Extrakce hodnot z ≈ô√°dku bez p≈ôetypov√°n√≠
                        nazev_discipliny = row.iloc[0].strip() if pd.notna(row.iloc[0]) else None
                        body = row.iloc[2].strip() if len(row) > 2 and pd.notna(row.iloc[2]) else None
                        jednotka = row.iloc[3].strip() if len(row) > 3 and pd.notna(row.iloc[3]) else "NEZAD√ÅNO"
                        napoveda = row.iloc[4].strip() if len(row) > 4 and pd.notna(row.iloc[4]) else "NEZAD√ÅNO"

                        # Validace povinn√Ωch hodnot
                        if not nazev_discipliny or body is None:
                            print(f"‚ö†Ô∏è P≈ôeskakuji ≈ô√°dek {processed_rows}: Chybƒõj√≠c√≠ povinn√° data")
                            skipped_rows += 1
                            continue

                        # Kontrola, zda discipl√≠na existuje v seznamu
                        if nazev_discipliny not in FORMATY_DISCIPLIN:
                            print(f"‚ö†Ô∏è P≈ôeskakuji ≈ô√°dek {processed_rows}: Nezn√°m√° discipl√≠na '{nazev_discipliny}'")
                            skipped_rows += 1
                            continue
                            
                        # Z√≠sk√°n√≠ form√°tu a konverze v√Ωkonu
                        format_type = FORMATY_DISCIPLIN.get(nazev_discipliny, "str")  # ‚úÖ p≈ôidat TADY
                        vykon_hodnota = convert_value(row.iloc[1], format_type)       # ‚úÖ pou≈æ√≠t

                        # Validace v√Ωkonu
                        if vykon_hodnota is None:
                            print(f"‚ö†Ô∏è P≈ôeskakuji ≈ô√°dek {processed_rows}: Chybƒõj√≠c√≠ nebo neplatn√° hodnota v√Ωkonu")
                            skipped_rows += 1
                            continue

                        # Najdeme nebo vytvo≈ô√≠me discipl√≠nu
                        discipline = Discipline.query.filter_by(nazev=nazev_discipliny).first()
                        if not discipline:
                            discipline = Discipline()
                            discipline.nazev = nazev_discipliny
                            discipline.jednotka = jednotka
                            discipline.napoveda = napoveda
                            db.session.add(discipline)
                            db.session.flush()  # Abychom z√≠skali ID

                        # Vytvo≈ô√≠me nov√Ω z√°znam sk√≥re - ukl√°d√°me v≈°e jako string
                        new_score = ReferenceScore()
                        new_score.discipline_id = discipline.id
                        new_score.vykon = vykon_hodnota  # Ulo≈æ√≠me p≈ôipravenou hodnotu jako string
                        new_score.body = body  # Ulo≈æ√≠me body jako string
                        db.session.add(new_score)

                    except Exception as e:
                        error_rows += 1
                        print(f"‚ùå Chyba p≈ôi zpracov√°n√≠ ≈ô√°dku {processed_rows}: {str(e)}")
                        # Transakce se automaticky rollbackne d√≠ky with db.session.begin()
                        
            # Statistika importu        
            successful_rows = processed_rows - skipped_rows - error_rows
            print(f"üìä Import dokonƒçen: Zpracov√°no {processed_rows} ≈ô√°dk≈Ø, √öspƒõ≈°nƒõ {successful_rows}, "
                  f"P≈ôeskoƒçeno {skipped_rows}, Chyb {error_rows}")
                  
            return True
            
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi importu bodovac√≠ datab√°ze: {str(e)}")
        return False

if __name__ == "__main__":
    from flask import Flask
    app = Flask(__name__)
    
    # üîπ P≈ôipojen√≠ k datab√°zi
    from db_config import db, DATABASE_URI
    app.config["SQLALCHEMY_DATABASE_URI"] = DATABASE_URI
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    db.init_app(app)

    with app.app_context():
        import_excel("bodovaci_databaze.xlsx")
